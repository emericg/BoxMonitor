<!DOCTYPE html>
<html lang="en">

  <head>
    <meta content="text/html; charset=utf-8" http-equiv="content-type">
    <meta charset="utf-8" />
    <meta content="Emeric" name="author" />
    <meta content="Realtime system monitoring" name="description" />
    <link rel="icon" type="image/svg" href="/public/favicon.svg" />
    <title><%- title %></title>
    <%- assets.css() %>
    <%- assets.js() %>
  </head>

  <body>
    <%- partial('partials/header') %>

    <div id="page">

      <section>
        <div class="box_wide">
          <div class="box_header">
            <img class="logo" src="images/round/gear.png" >
            <div class="title">
              <h1 class="orange">System informations</h1>
              <h2 class="orange">A lot of system informations in this box</h2>
            </div>
          </div>
          <div class="box_body">
            <table>
              <tr>
                <td><b>Operating system:</b></td>
                <td><%- sys_os_t %></td>
              </tr>
              <tr>
                <td><b>Network hostname:</b></td>
                <td><%- sys_hostname %></td>
              </tr>
              <tr>
                <td><b>Temporary directory:</b></td>
                <td><%- sys_tmpdir %></td>
              </tr>
              <tr>
                <td><b>Uptime:</b></td>
                <td><span id="sys_uptime">loading...</span></td>
              </tr>
              <tr>
                <td><b>Processors:</b></td>
                <td><%- sys_cpu_t %> <%- sys_cpu %></td>
              </tr>
            </table>
          </div>
        </div>
      </section>

      <section>
        <div class="box_wide">
          <div class="box_header">
            <img class="logo" src="images/round/alert.png" >
            <div class="title">
              <h1 class="green">CPU graph</h1>
              <h2 class="green">Let's try socket.io!</h2>
            </div>
          </div>
          <div class="box_body">
            <table>
              <tr>
                <td><b>CPU load average:</b></td>
                <td><span id="cpu_load_avg">Gathering cpu load through socket.io...</span></td>
              </tr>
              <tr>
                <td><b>CPU usage average:</b></td>
                <td><span id="cpu_usage_avg">Gathering average cpu usage through socket.io...</span></td>
              </tr>
              <tr>
                <td><b>CPU frequencies average:</b></td>
                <td><span id="cpu_freq_avg">Gathering average cpu frequency through socket.io...</span></td>
              </tr>
            </table>
            <b>Frequencies:</b> <span id="cpu_freq">Gathering cpu frequencies through socket.io...</span><br/>
            <b>Instant usage:</b> <span id="cpu_usage">Gathering cpu usage through socket.io...</span><br/>
            <div class="box_zone"><div class="graph_cpu" height="128px"></div></div>

<script type="text/javascript">

// Connect to the node.js server
var socket = io.connect(/*document.URL*/);

// CPU GRAPH /////////////////////////////////////////////////////////

var t = 1; // start time (seconds since epoch)
var v = 1; // start value (subscribers)

function usage_start() {
  return {
    timecode: t++,
    usage: 0
  };
}

function usage_graph() {
  socket.request('/cpu/usage_avg', {
    message: 'usage_avg'
  }, function (response) {
    //console.log(JSON.stringify(response));
    t = 50 + response[0].timecode;
    v = response[0].usage;
  });

  return {
    timecode: t,
    usage: v
  };
}

var data = d3.range(50).map(usage_start); // starting dataset

setInterval(function() {
  data.shift();
  data.push(usage_graph());
  redraw();
}, 1000);

var w = 16, h = 128;

var x = d3.scale.linear()
    .domain([0, 1])
    .range([0, w]);

var y = d3.scale.linear()
    .domain([0, 100])
    .rangeRound([0, h]);

var chart = d3.select(".graph_cpu").append("svg")
    .attr("class", "chart")
    .attr("width", "100%")
    .attr("height", h)
    .attr("fill", "#ccc");

  chart.append("line")
    .attr("x1", 0)
    .attr("x2", "100%")
    .attr("y1", .5)
    .attr("y2", .5)
    .style("stroke", "#ccc");

  chart.append("line")
    .attr("x1", 0)
    .attr("x2", "100%")
    .attr("y1", 32 - .5)
    .attr("y2", 32 - .5)
    .style("stroke", "#ccc");

  chart.append("line")
    .attr("x1", 0)
    .attr("x2", "100%")
    .attr("y1", 64 - .5)
    .attr("y2", 64 - .5)
    .style("stroke", "#ccc");

  chart.append("line")
    .attr("x1", 0)
    .attr("x2", "100%")
    .attr("y1", 96 - .5)
    .attr("y2", 96 - .5)
    .style("stroke", "#ccc");

chart.selectAll("rect")
    .data(data)
  .enter().append("rect")
    .attr("x", function(d, i) { return x(i) - .5; })
    .attr("y", function(d) { return h - y(d.usage) - .5; })
    .attr("width", h)
    .attr("height", function(d) { return y(d.usage); });

chart.append("line")
    .attr("x1", 0)
    .attr("x2", "100%")
    .attr("y1", h - .5)
    .attr("y2", h - .5)
    .style("stroke", "red");

function redraw() {
  var rect = chart.selectAll("rect")
      .data(data, function(d) { return d.timecode; });

  rect.enter().insert("rect", "line")
      .attr("x", function(d, i) { return x(i + 1) - .5; })
      .attr("y", function(d) { return h - y(d.usage) - .5; })
      .attr("width", w)
      .attr("height", function(d) { return y(d.usage); })
      .transition()
      .duration(1000)
      .attr("x", function(d, i) { return x(i) - .5; });

  rect.transition()
      .duration(1000)
      .attr("x", function(d, i) { return x(i) - .5; });

  rect.exit().transition()
      .remove();
}
</script>
          </div>
        </div>
      </section>

      <section>
        <div class="box_square">
          <div class="box_header">
            <img class="logo" src="images/round/gear.png" >
            <div class="title">
              <h1 class="pink">Disks</h1>
              <h2 class="pink">Detailed disks usage</h2>
            </div>
          </div>
          <div class="box_body">
            <span id="disks_overview">loading...</span>
          </div>
        </div>

        <div class="box_square">
          <div class="box_header">
            <img class="logo" src="images/round/usage.png" >
            <div class="title">
              <h1 class="red">Memory</h1>
              <h2 class="red">Detailed memory stats</h2>
            </div>
            <div class="infos"><p class="red"><span id="mem_usage_percent">0</span>%</p></div>
          </div>
          <div class="box_body">
            <table>
              <tr>
                <td><b>Total:</b></td>
                <td><%- sys_mem_mib %> (<%- sys_mem_mb %>)</td>
              </tr>
              <tr>
                <td><b>Used:</b></td>
                <td><%- sys_mem_used %></td>
              </tr>
              <tr>
                <td><b>Free:</b></td>
                <td><%- sys_mem_free %></td>
              </tr>
              <tr>
                <td><b>Swap:</b></td>
                <td><span id="sys_swap">searching...</span></td>
              </tr>
            </table>
            <div class="graph_mem"></div>
          </div>
        </div>
      </section>

      <section>
        <div class="box_square">
          <div class="box_header">
            <img class="logo" src="images/round/bdd.png" >
            <div class="title">
              <h1 class="blue">Network</h1>
              <h2 class="blue">Active network interfaces for '<%- sys_hostname %>'</h2>
            </div>
          </div>
          <div class="box_body">
            <b>Interfaces:</b><br />
            <% _.each(sys_net, function (sys_net) { %>
            <li><%= JSON.stringify(sys_net) %></li><% }) %><br />
            <b>Hostname:</b> <%- sys_hostname %>
          </div>
        </div>

        <div class="box_square">
          <div class="box_header">
            <img class="logo" src="images/round/gear.png" >
            <div class="title">
              <h1 class="orange">CPUs</h1>
              <h2 class="orange">Detailed processors list</h2>
            </div>
          </div>
          <div class="box_body">
            <% _.each(sys_cpus, function (sys_cpus) { %>
            <li><%= sys_cpus.model %></li><% }) %>
          </div>
        </div>
      </section>
    </div>

    <%- partial('partials/footer') %>
  </body>
</html>

<script type="text/javascript">

// Connect to the node.js server
var socket = io.connect(/*document.URL*/);

// UPTIME ////////////////////////////////////////////////////////////

function get_uptime() {
  socket.request('/home/uptime', {
    message: 'uptime'
  }, function (response) {
    //console.log(response);
    document.getElementById('sys_uptime').innerHTML = response[0].uptime;
  });
}

setInterval(get_uptime, 1000);

// CPU ///////////////////////////////////////////////////////////////

function freq() {
  socket.request('/cpu/freq', {
    message: 'freq'
  }, function (response) {
    //console.log(JSON.stringify(response));
    document.getElementById('cpu_freq').innerHTML = JSON.stringify(response);
  });
}

function freq_avg() {
  socket.request('/cpu/freq_avg', {
    message: 'freq_avg'
  }, function (response) {
    //console.log(JSON.stringify(response));
    document.getElementById('cpu_freq_avg').innerHTML = JSON.stringify(response);
  });
}

function load_avg() {
  socket.request('/cpu/load_avg', {
    message: 'load_avg'
  }, function (response) {
    //console.log(JSON.stringify(response));
    document.getElementById('cpu_load_avg').innerHTML = JSON.stringify(response);
  });
}

function usage() {
  socket.request('/cpu/usage', {
    message: 'usage'
  }, function (response) {
    //console.log(JSON.stringify(response));
    document.getElementById('cpu_usage').innerHTML = JSON.stringify(response);
  });
}

function usage_avg() {
  socket.request('/cpu/usage_avg', {
    message: 'usage_avg'
  }, function (response) {
    //console.log(JSON.stringify(response));
    document.getElementById('cpu_usage_avg').innerHTML = JSON.stringify(response);
  });
}

setInterval(load_avg, 2500);
setInterval(freq, 1000);
setInterval(freq_avg, 1000);
setInterval(usage, 1000);
setInterval(usage_avg, 1000);

// MEM ///////////////////////////////////////////////////////////////

var chart_mem = null;
var data = [];

function chart_mem_data(param) {
  data[0] = param;

  chart_mem = d3.select(".graph_mem").append("svg")
    .attr("class", "chart_mem")
    .attr("width", "100%")
    .attr("height", 72)
    .append("g")
    .attr("transform", "translate(8,24)");

  var x = d3.scale.linear()
    .domain([0, 100])
    .range([0, "92%"]);
  var y = d3.scale.ordinal()
    .domain(data)
    .rangeBands([16, 80]);

  chart_mem.selectAll("line")
    .data(x.ticks(4))
    .enter().append("line")
    .attr("x1", x)
    .attr("x2", x)
    .attr("y1", 0)
    .attr("y2", 72)
    .style("stroke", "#ccc");
  chart_mem.selectAll(".rule")
    .data(x.ticks(4))
    .enter().append("text")
    .attr("class", "rule")
    .attr("x", x)
    .attr("y", 0)
    .attr("dy", -3)
    .attr("text-anchor", "middle")
    .text(String);

  chart_mem.selectAll("rect")
    .data(data)
    .enter().append("rect")
    .attr("y", y)
    .attr("width", x)
    .attr("height", y.rangeBand());
/*
  // glitch: draw at an incorrect position
  chart_mem.selectAll("text")
    .data(data)
    .enter().append("text")
    .attr("x", x)
    .attr("y", function(d) { return y(d) + y.rangeBand() / 2; })
    .attr("dx", -3) // padding-right
    .attr("dy", ".35em") // vertical-align: middle
    .attr("text-anchor", "end") // text-align: right
    .text(String);
*/
  chart_mem.append("line")
    .attr("y1", 0)
    .attr("y2", 72)
    .style("stroke", "#000");
}

function rechart_mem_data(param) {
  data[0] = param;

  var x = d3.scale.linear()
    .domain([0, 100])
    .range([0, "93%"]);
  var y = d3.scale.ordinal()
    .domain(data)
    .rangeBands([16, 80]);

  chart_mem.selectAll("rect")
    .data(data)
    .transition()
    .attr("y", y)
    .attr("width", x)
    .attr("height", y.rangeBand());
}

function load_data() {
  socket.request('/mem/usage_percent', {
    message: 'usage_percent'
  }, function (response) {
    //console.log(response);
    chart_mem_data(response);
    document.getElementById('mem_usage_percent').innerHTML = JSON.stringify(response);
  });
}

function reload_data() {
  socket.request('/mem/usage_percent', {
    message: 'usage_percent'
  }, function (response) {
    //console.log(response);
    document.getElementById('mem_usage_percent').innerHTML = JSON.stringify(response);

    if( chart_mem == null)
      chart_mem_data(response);
    else
      rechart_mem_data(response);
  });
}

function get_swap() {
  socket.request('/static/swap', {
    message: 'swap'
  }, function (response) {
    //console.log(response);
    document.getElementById('sys_swap').innerHTML = JSON.stringify(response);
  });
}

setInterval(get_swap, 2500);
setInterval(reload_data, 2500);

// DISKS /////////////////////////////////////////////////////////////

function get_disks() {
  socket.request('/disks/index', {
    message: 'index'
  }, function (response) {
    var df = new String(response);
    console.log(df);
    //document.getElementById('disks_overview').innerHTML = response;
  });
}

setInterval(get_disks, 5000);

</script>