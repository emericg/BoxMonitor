<!DOCTYPE html>
<html lang="en">

  <head>
    <meta charset="utf-8" />
    <meta name="description" content="Realtime system monitoring" />
    <meta name="author" content="Emeric Grange <emeric.grange@gmail.com>" />
    <meta name="viewport" content="width=device-width, user-scalable=no" />
    <link rel="icon" type="image/svg" href="/public/favicon.svg" />
    <title><%- title %></title>
    <%- assets.css() %>
    <%- assets.js() %>
  </head>

  <body>
    <%- partial('partials/header') %>

    <div id="page">

      <section>
        <div class="box_wide">
          <div class="box_header">
            <img class="logo" src="images/round/gear.png" >
            <div class="title">
              <h1 class="orange">System informations</h1>
              <h2 class="orange">A lot of generic informations in this box</h2>
            </div>
          </div>
          <div class="box_body">
            <div class="two_panes">
              <table>
                <tr>
                  <td>System:</td>
                  <td><b class="orange"><%- sys_os_t %></b></td>
                </tr>
                <tr>
                  <td>Uptime:</td>
                  <td><b class="orange"><span id="sys_uptime">loading...</span></b></td>
                </tr>
                <tr>
                  <td>Hostname:</td>
                  <td><b class="orange"><%- sys_hostname %></b></td>
                </tr>
              </table>
            </div>
            <div class="two_panes">
              <table>
                <tr>
                  <td>CPU:</td>
                  <td><b class="orange"><%- sys_cpu %></b></td>
                </tr>
                <tr>
                  <td>RAM:</td>
                  <td><b class="orange"><%- sys_mem_mib %></b></td>
                </tr>
                <tr>
                  <td>Swap:</td>
                  <td><b class="orange"><%- sys_swap_mib %></b></td>
                </tr>
              </table>
            </div>
          </div>
        </div>
      </section>

      <section>
        <div class="box_wide">
          <div class="box_header">
            <img class="logo" src="images/round/alert.png" >
            <div class="title">
              <h1 class="green">CPU graph</h1>
              <h2 class="green">Let's try socket.io!</h2>
            </div>
            <div class="infos"><p class="green"><span id="cpu_usage_percent">0</span>%</p></div>
          </div>
          <div class="box_body">
            CPU model: <b class="green"><%- sys_cpu %></b> <%- sys_cpu_t %> <br />
            CPU loads: <b class="green"><span id="load_one">loading</span></b> (1 mins) <b class="green"><span id="load_five">loading</span></b> (5 mins) <b class="green"><span id="load_fifteen">loading</span></b> (15 min)<br />
            CPU is currently running at <b class="green"><span id="freq_avg">loading</span></b> Mhz (average)<br />
            <div id="graph_cpu_id"><div class="box_zone"><div class="graph_cpu" height="128px"></div></div></div>
          </div>
        </div>
      </section>

      <section>
        <div class="box_square">
          <div class="box_header">
            <img class="logo" src="images/round/usage.png" >
            <div class="title">
              <h1 class="red">Memory</h1>
              <h2 class="red">Detailed memory stats</h2>
            </div>
            <div class="infos"><p class="red"><span id="mem_usage_percent">0</span>%</p></div>
          </div>
          <div class="box_body">
            <div class="two_panes">
              <table>
                <tr>
                  <td>RAM:</td>
                  <td><b class="red"><%- sys_mem_mib %></b></td>
                </tr>
                <tr>
                  <td>Used:</td>
                  <td><b class="red"><span id="ram_used">loading...<span></b></td>
                </tr>
                <tr>
                  <td>Free:</td>
                  <td><b class="red"><span id="ram_free">loading...<span></b></td>
                </tr>
              </table>
            </div>
            <div class="two_panes">
              <table>
                <tr>
                  <td>Swap:</td>
                  <td><b class="red"><%- sys_swap_mib %></b></td>
                </tr>
                <tr>
                  <td>Used:</td>
                  <td><b class="red"><span id="swap_used">loading...<span></b></td>
                </tr>
                <tr>
                  <td>Free:</td>
                  <td><b class="red"><span id="swap_free">loading...<span></b></td>
                </tr>
              </table>
            </div>
            <div class="graph_mem"></div>
          </div>
        </div>
        <div class="box_spacer"><br /></div>
        <div class="box_square">
          <div class="box_header">
            <img class="logo" src="images/round/bdd.png" >
            <div class="title">
              <h1 class="blue">Network</h1>
              <h2 class="blue">Active network interfaces</h2>
            </div>
          </div>
          <div class="box_body">
            Hostname: <b class="blue"><%- sys_hostname %></b><br />
            Interfaces:<br />
            <span id="network_interfaces">loading...</span>
          </div>
        </div>
      </section>

      <section>
        <div class="box_wide">
          <div class="box_header">
            <img class="logo" src="images/round/circle.png" >
            <div class="title">
              <h1 class="pink">Disks</h1>
              <h2 class="pink">Detailed disks usage</h2>
            </div>
          </div>
          <div class="box_body">
            Temporary directory: <b class="pink"><%- sys_tmpdir %></b><br />
            Disks usage:<br />
            <span id="disks_overview">loading...</span>
          </div>
        </div>
      </section>
    </div>

    <%- partial('partials/footer') %>
  </body>
</html>

<script type="text/javascript">

// Connect to the node.js server
var socket = io.connect(/*document.URL*/);

// UPTIME ////////////////////////////////////////////////////////////

function get_uptime() {
  socket.request('/home/uptime', {
    message: 'uptime'
  }, function (response) {
    //console.log(response);
    document.getElementById('sys_uptime').innerHTML = response[0].uptime;
  });
}

setInterval(get_uptime, 1000);

// CPU ///////////////////////////////////////////////////////////////

var cpu_usage = 0.0;

function cpu_freq_avg() {
  socket.request('/cpu/freq_avg', {
    message: 'freq_avg'
  }, function (response) {
    //console.log(JSON.stringify(response));
    document.getElementById('freq_avg').innerHTML = response[0].freq_avg;
  });
}

function cpu_load_avg() {
  socket.request('/cpu/load_avg', {
    message: 'load_avg'
  }, function (response) {
    //console.log(JSON.stringify(response));
    document.getElementById('load_one').innerHTML = response[0].one;
    document.getElementById('load_five').innerHTML = response[0].five;
    document.getElementById('load_fifteen').innerHTML = response[0].fifteen;
  });
}

function cpu_usage_avg() {
  socket.request('/cpu/usage_avg', {
    message: 'usage_avg'
  }, function (response) {
    //console.log(JSON.stringify(response));
    if( !isNaN(response[0].usage) ) {
      cpu_usage = response[0].usage;
      document.getElementById('cpu_usage_percent').innerHTML = cpu_usage;
    }
  });
}

function cpu_processes_running() {
  socket.request('/cpu/processes_running', {
    message: 'processes_running'
  }, function (response) {
    console.log(JSON.stringify(response));
  });
}

cpu_load_avg();
cpu_freq_avg();
cpu_usage_avg();
//cpu_processes_running();

setInterval(cpu_load_avg, 5000);
setInterval(cpu_freq_avg, 1000);
setInterval(cpu_usage_avg, 750);

// CPU GRAPH /////////////////////////////////////////////////////////

var t = 0; // start time (seconds since epoch)
var v = 0; // start value (cpu usage)
var bars = 0; // number of bars per chart
var w = 16, h = 128; // width and height of a bar
var chart_cpu_width = 0;

var chart_cpu = null;
var data_cpu = null;

var x = d3.scale.linear()
    .domain([0, 1])
    .range([0, w]);

var y = d3.scale.linear()
    .domain([0, 100])
    .rangeRound([0, h]);

function cpu_usage_graph() {
  return {
    timecode: t++,
    usage: cpu_usage
  };
}

function cpu_usage_graph_start() {
  return {
    timecode: t++,
    usage: 0
  };
}

function cpu_draw() {

  // Find out how many bars we can stuff inside the given SVG size
  chart_cpu_width = $("#graph_cpu_id").width();
  bars = (chart_cpu_width / w).toFixed();

  // Initial dataset
  data_cpu = d3.range(bars).map(cpu_usage_graph_start);

  chart_cpu = d3.select(".graph_cpu").append("svg")
    .attr("class", "chart_cpu")
    .attr("width", "100%")
    .attr("height", h)
    .attr("fill", "#ccc");

  chart_cpu.append("line")
    .attr("x1", 0)
    .attr("x2", "100%")
    .attr("y1", 32 - .5)
    .attr("y2", 32 - .5)
    .style("stroke", "#ccc");

  chart_cpu.append("line")
    .attr("x1", 0)
    .attr("x2", "100%")
    .attr("y1", 64 - .5)
    .attr("y2", 64 - .5)
    .style("stroke", "#ccc");

  chart_cpu.append("line")
    .attr("x1", 0)
    .attr("x2", "100%")
    .attr("y1", 96 - .5)
    .attr("y2", 96 - .5)
    .style("stroke", "#ccc");

  chart_cpu.selectAll("rect")
    .data(data_cpu)
    .enter().append("rect")
    .attr("x", function(d, i) { return x(i) - .5; })
    .attr("y", function(d) { return h - y(d.usage) - .5; })
    .attr("width", h)
    .attr("height", function(d) { return y(d.usage); });

  chart_cpu.append("line")
    .attr("x1", 0)
    .attr("x2", "100%")
    .attr("y1", h - .2)
    .attr("y2", h - .2)
    .style("stroke", "red");
}

function cpu_redraw() {

  // Check if we need to resize / rescale the graph
  var newwidth = $("#graph_cpu_id").width();

  if( newwidth != chart_cpu_width ) {
    // Restart the graph with a different number of bars
    bars = (newwidth/w).toFixed();
    data_cpu = d3.range(bars).map(cpu_usage_graph_start);

    // Try to rescale the existing bars (buggy)
    //w *= (newwidth / chart_cpu_width);

    chart_cpu_width = newwidth;
  }

  var rect = chart_cpu.selectAll("rect")
    .data(data_cpu, function(d) { return d.timecode; });

  rect.enter().insert("rect", "line")
    .attr("x", function(d, i) { return x(i + 1) - .5; })
    .attr("y", function(d) { return h - y(d.usage) - .5; })
    .attr("width", w)
    .attr("height", function(d) { return y(d.usage); })
    .transition()
    .duration(950)
    .attr("x", function(d, i) { return x(i) - .5; });

  rect.transition()
    .duration(950)
    .attr("x", function(d, i) { return x(i) - .5; });

  rect.exit().transition()
    .duration(950)
    .attr("x", function(d, i) { return x(i - 1) - .5; })
    .remove();
}

cpu_draw();

setInterval(function() {
  data_cpu.shift();
  data_cpu.push(cpu_usage_graph());
  cpu_redraw();
}, 1000);

// MEM ///////////////////////////////////////////////////////////////

var mem_usage = 0.0;

function mem_stats() {
  socket.request('/mem/stats', {
    message: 'stats'
  }, function (response) {
  //console.log(JSON.stringify(response));

  var ramused = (response[1].MemTotal - response[1].MemFree - response[1].Buffers - response[1].Cached);
  var ramfree = (response[1].MemTotal - ramused);
  mem_usage = ((ramused / response[1].MemTotal) * 100).toFixed(1);

  document.getElementById('mem_usage_percent').innerHTML = mem_usage;
  document.getElementById('ram_used').innerHTML = (ramused / 1024).toFixed() + " Mib";
  document.getElementById('ram_free').innerHTML = (ramfree / 1024).toFixed() + " Mib";

  if( chart_mem == null)
    mem_draw();
  });
}

function swap_stats() {
  socket.request('/swap/stats', {
    message: 'stats'
  }, function (response) {
  //console.log(JSON.stringify(response));

  var swapused = response[1].SwapTotal - response[1].SwapFree;
  var swapfree = response[1].SwapFree;

  document.getElementById('swap_used').innerHTML = (swapused / 1024).toFixed() + " Mib";
  document.getElementById('swap_free').innerHTML = (swapfree / 1024).toFixed() + " Mib";
  });
}

function swap_stats_full() {
  socket.request('/mem/swap_stats_full', {
    message: 'swap_stats_full'
  }, function (response) {
    console.log(JSON.stringify(response));
  });
}

mem_stats();
swap_stats();
//swap_stats_full();

setInterval(mem_stats, 2500);
setInterval(swap_stats, 10000);

// MEM CHART /////////////////////////////////////////////////////////

var chart_mem = null;
var data_mem = new Array();

function mem_draw() {
  data_mem[0] = mem_usage;

  var x = d3.scale.linear()
    .domain([0, 100])
    .range([0, "93%"]);

  var y = d3.scale.ordinal()
    .domain(data_mem)
    .rangeBands([8, 64]);

  chart_mem = d3.select(".graph_mem").append("svg")
    .attr("class", "chart_mem")
    .attr("width", "100%")
    .attr("height", 72)
    .append("g")
    .attr("transform", "translate(8,24)");

  chart_mem.selectAll("line")
    .data(x.ticks(4))
    .enter().append("line")
    .attr("x1", x)
    .attr("x2", x)
    .attr("y1", 0)
    .attr("y2", 72)
    .style("stroke", "#ccc");

  chart_mem.selectAll(".rule")
    .data(x.ticks(4))
    .enter().append("text")
    .attr("class", "rule")
    .attr("x", x)
    .attr("y", 0)
    .attr("dy", -3)
    .attr("text-anchor", "middle")
    .text(String);

  chart_mem.selectAll("rect")
    .data(data_mem)
    .enter().append("rect")
    .attr("y", y)
    .attr("width", x)
    .attr("height", y.rangeBand());

  chart_mem.selectAll("rect_cached")
    .data(data_mem)
    .enter().append("rect_cached")
    .attr("x", 75)
    .attr("y", y)
    .attr("width", 5)
    .attr("height", y.rangeBand());
/*
  // glitch: draw at an incorrect position
  chart_mem.selectAll("text")
    .data(data_mem)
    .enter().append("text")
    .attr("x", x)
    .attr("y", function(d) { return y(d) + y.rangeBand() / 2; })
    .attr("dx", -3) // padding-right
    .attr("dy", ".35em") // vertical-align: middle
    .attr("text-anchor", "end") // text-align: right
    .text(String);
*/
  chart_mem.append("line")
    .attr("y1", 0)
    .attr("y2", 72)
    .style("stroke", "#000");
}

function mem_redraw() {
  data_mem[0] = mem_usage;

  var x = d3.scale.linear()
    .domain([0, 100])
    .range([0, "93%"]);

  var y = d3.scale.ordinal()
    .domain(data_mem)
    .rangeBands([8, 64]);

  chart_mem.selectAll("rect")
    .data(data_mem)
    .transition()
    .attr("y", y)
    .attr("width", x)
    .attr("height", y.rangeBand());
}

setInterval(mem_redraw, 2500);

// DISKS /////////////////////////////////////////////////////////////

function get_disks() {
  socket.request('/disk/stats', {
    message: 'stats'
  }, function (response) {
    document.getElementById('disks_overview').innerHTML = JSON.stringify(response);
  });
}

get_disks();
//setInterval(get_disks, 10000);

// NETWORK ///////////////////////////////////////////////////////////

function get_network_interfaces() {
  socket.request('/network/interfaces', {
    message: 'interfaces'
  }, function (response) {
    document.getElementById('network_interfaces').innerHTML = JSON.stringify(response);
  });
}

get_network_interfaces();
//setInterval(get_network_interfaces, 10000);

</script>